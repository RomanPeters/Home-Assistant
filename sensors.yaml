- platform: buienradar
  monitored_conditions:
    - condition
    - humidity
    - temperature
    - pressure
    - precipitation
    - precipitation_forecast_total


#- platform: miflora
#  mac: 'C4:7C:8D:66:42:FC'

- platform: waqi
  token: !secret waqi_token
  locations:
    - 'utrecht'
  stations:
    - 'de Jongweg, Utrecht'

- platform: time_date
  display_options:
    - 'time'

# Templates
- platform: template
  sensors:
    air_quality_status:
      friendly_name: Air Quality Status
      value_template: >
        {% if states('sensor.waqi_de_jongweg_utrecht') | int <= 50 %}
          Good
        {% elif states('sensor.waqi_de_jongweg_utrecht') | int <= 100 %}
          Moderate
        {% elif states('sensor.waqi_de_jongweg_utrecht') | int <= 150 %}
          Unhealthy for Sensitive Groups
        {% elif states('sensor.waqi_de_jongweg_utrecht') | int <= 200 %}
          Unhealthy
        {% elif states('sensor.waqi_de_jongweg_utrecht') | int <= 300 %}
          Very Unhealthy
        {% elif states('sensor.waqi_de_jongweg_utrecht') | int > 300 %}
          Hazardous
        {% else %}
          Unknown
        {% endif %}

    waqi_particle_sensor_pm25:
      friendly_name: WAQI PM2.5
      unit_of_measurement: "μg/m3"
      value_template: >
        {{ state_attr('sensor.waqi_de_jongweg_utrecht', 'pm_2_5') }}
    waqi_particle_sensor_pm10:
      friendly_name: WAQI PM10
      unit_of_measurement: "μg/m3"
      value_template: >
        {{ state_attr('sensor.waqi_de_jongweg_utrecht', 'pm_10') }}
    plant_summary:
      friendly_name: "Plant"
      value_template: > 
        {% if is_state('plant.plant', 'ok') %}
          Your plant is doing fantastic!
        {% elif is_state('plant.plant', 'unknown') %}
          I'm not sure how your plant is doing.
        {% endif %}
        {% for problem in states.plant.plant.attributes.problem.split(', ') -%}
          {%- if loop.first %}The plant {% elif loop.last %} and {% else %}, {% endif -%}
          {%- if problem == 'moisture high' -%}
            has too much water
          {%- elif problem == 'moisture low' -%}
            would like some water
          {%- elif problem == 'batter low' -%}
            sensor battery is almost empty
          {%- elif problem ==  'temperature low' -%}
            is too cold
          {%- elif problem == 'temperature high' -%}
            is too hot
          {%- elif problem == 'conductivity high' -%}
            has too much nutrients
          {%- elif problem == 'conductivity low' -%}
            has not enough nutrients
          {%- elif problem == 'brightness high' -%}
            recieves too much sunlight
          {%- elif problem == 'brightness low' -%}
            doesn't receive enough sunlight
          {%- else -%}
            {{ problem }}
          {%- endif -%}
        {%- endfor -%}.
      icon_template: >
        {% if is_state('sensor.plant_emoji', 'perfect') %}
          mdi:emoticon-happy
        {% elif is_state('sensor.plant_emoji', 'unkown') %}
          mdi:help-circle
        {% elif states('sensor.plant_emoji').split(',') | length == 1  %}
          mdi:emoticon-neutral
        {% else %}
          mdi:emoticon-sad
        {% endif %}

    status_summary:
      friendly_name: Status Summary
      value_template: >
        {% if is_state("group.roman", "home") and is_state("group.nadine", "home") -%}
          Roman and Nadine are
        {%- elif is_state("group.roman", "home") -%}
          Roman is
        {%- elif is_state("group.nadine", "home") -%}
          Nadine is
        {%- else -%}
          No one is home. {%- endif -%}
        {%- if (is_state("group.roman", "home") or is_state("group.nadine", "home")) and is_state("switch.television", "on") -%}
          {{ " " }}watching television.
        {%- elif (is_state("group.roman", "home") or is_state("group.nadine", "home")) and is_state("input_select.home_status", "Night") -%}
          {{ " " }}in bed.
        {%- elif is_state("group.roman", "home") or is_state("group.nadine", "home") -%}
          {{ " " }}home.{%- endif -%}

          {{ " " }}Current temperature is {{ state_attr('climate.thermostat', 'current_temperature') }}°
        {%- if is_state("climate.thermostat", "idle") -%}
          , guarded at {{ states.climate.thermostat.attributes.temperature }}°.
        {%- elif is_state("climate.thermostat", "heat") -%}
          , warming to {{ states.climate.thermostat.attributes.temperature }}°.
        {%- else -%}
          .
        {%- endif -%}
        {%- if is_state("binary_sensor.door", "on") and is_state("binary_sensor.window", "on") -%}
          {{ " " }}The door and the window are both open.
        {%- elif is_state("binary_sensor.door", "on") -%}
          {{ " " }}The door is open.
        {%- elif is_state("binary_sensor.window", "on") -%}
          {{ " " }}The window is open.
        {%- endif %}
        {%- for i in states.group.status.attributes.entity_id if is_state(i, 'on') -%}
          {%- if loop.first %}{{ " " }}The {% elif loop.last %} and the {% else %}, the {% endif -%}
          {{ state_attr(i, 'friendly_name') | lower }} is {{ states(i) }}
          {%- if loop.last %}.{% endif -%}
        {%- endfor -%}
        {%- if is_state("group.status", "off") and (is_state("climate.thermostat", "heat") or is_state("climate.thermostat", "idle") or is_state("switch.television", "on")) -%}
          {{ " " }}All other devices are off.
        {%- elif is_state("group.status", "off") -%}
          {{ " " }}All devices are off.
        {%- endif %}

    next_event:
      friendly_name: Next Event
      value_template: >
        {% set low = as_timestamp(state_attr('calendar.rum_dmc', 'start_time')) %}
        {% set cal = 'calendar.rum_dmc' %}
        {% if  as_timestamp(state_attr('calendar.werk', 'start_time')) and as_timestamp(state_attr('calendar.werk', 'start_time')) < low %}
          {% set low = as_timestamp(state_attr('calendar.werk', 'start_time')) %}
          {% set cal = 'calendar.werk' %}
        {% endif %}
        {% if  as_timestamp(state_attr('calendar.studie', 'start_time')) and as_timestamp(state_attr('calendar.studie', 'start_time')) < low %}
          {% set low = as_timestamp(state_attr('calendar.studie', 'start_time')) %}
          {% set cal = 'calendar.studie' %}
        {% endif %}
        {% if  as_timestamp(state_attr('calendar.e_surveillant', 'start_time')) and as_timestamp(state_attr('calendar.e_surveillant', 'start_time')) < low %}
          {% set low = as_timestamp(state_attr('calendar.e_surveillant', 'start_time')) %}
          {% set cal = 'calendar.e_surveillant' %}
        {% endif %}
        {% if  as_timestamp(state_attr('calendar.cursusplanner', 'start_time')) and as_timestamp(state_attr('calendar.cursusplanner', 'start_time')) < low %}
          {% set low = as_timestamp(state_attr('calendar.cursusplanner', 'start_time')) %}
          {% set cal = 'calendar.cursusplanner' %}
        {% endif %}
        {% if  as_timestamp(state_attr('calendar.ws70', 'start_time')) and as_timestamp(state_attr('calendar.ws70', 'start_time')) < low %}
          {% set cal = 'calendar.ws70' %}
        {% endif %}
          {{ cal }}




### MQTT
- platform: "mqtt"
  name: Button
  state_topic: "zigbee2mqtt/button"
  availability_topic: "zigbee2mqtt/bridge/state"
  icon: "mdi:toggle-switch"
  value_template: "{{ value_json.click }}"
  json_attributes: 
    - "linkquality"
    - "battery"
    - "voltage"
    - "action"
    - "duration"
  force_update: true

- platform: "mqtt"
  name: Wall switch
  state_topic: "zigbee2mqtt/wall_switch"
  availability_topic: "zigbee2mqtt/bridge/state"
  icon: "mdi:toggle-switch"
  value_template: "{{ value_json.click }}"
  json_attributes: 
    - "linkquality"
    - "battery"
    - "voltage"
    - "action"
    - "duration"
  force_update: true

- platform: "mqtt"
  name: Xiaomi Temperature
  state_topic: "zigbee2mqtt/sensor_inside"
  availability_topic: "zigbee2mqtt/bridge/state"
  unit_of_measurement: "°C"
  icon: "mdi:thermometer"
  value_template: "{{ value_json.temperature }}"
  json_attributes: 
    - "linkquality"
    - "battery"
    - "voltage"

- platform: "mqtt"
  name: Xiaomi Humidity
  state_topic: "zigbee2mqtt/sensor_inside"
  availability_topic: "zigbee2mqtt/bridge/state"
  unit_of_measurement: "%"
  icon: "mdi:water-percent"
  value_template: "{{ value_json.humidity }}"
  json_attributes: 
    - "linkquality"
    - "battery"
    - "voltage"

- platform: "mqtt"
  name: Xiaomi Pressure
  state_topic: "zigbee2mqtt/sensor_inside"
  availability_topic: "zigbee2mqtt/bridge/state"
  unit_of_measurement: "hPa"
  icon: "mdi:speedometer"
  value_template: "{{ value_json.pressure }}"
  json_attributes: 
    - "linkquality"
    - "battery"
    - "voltage"

- platform: "mqtt"
  name: Xiaomi Temperature 2
  state_topic: "zigbee2mqtt/sensor_outside"
  availability_topic: "zigbee2mqtt/bridge/state"
  unit_of_measurement: "°C"
  icon: "mdi:thermometer"
  value_template: "{{ value_json.temperature }}"
  json_attributes: 
    - "linkquality"
    - "battery"
    - "voltage"

- platform: "mqtt"
  name: Xiaomi Humidity 2
  state_topic: "zigbee2mqtt/sensor_outside"
  availability_topic: "zigbee2mqtt/bridge/state"
  unit_of_measurement: "%"
  icon: "mdi:water-percent"
  value_template: "{{ value_json.humidity }}"
  json_attributes: 
    - "linkquality"
    - "battery"
    - "voltage"

- platform: "mqtt"
  name: Xiaomi Pressure 2
  state_topic: "zigbee2mqtt/sensor_outside"
  availability_topic: "zigbee2mqtt/bridge/state"
  unit_of_measurement: "hPa"
  icon: "mdi:speedometer"
  value_template: "{{ value_json.pressure }}"
  json_attributes: 
    - "linkquality"
    - "battery"
    - "voltage"

- platform: "mqtt"
  name: Illuminance
  state_topic: "zigbee2mqtt/motion_sensor"
  availability_topic: "zigbee2mqtt/bridge/state"
  unit_of_measurement: "lx"
  icon: "mdi:theme-light-dark"
  value_template: "{{ value_json.illuminance }}"
  json_attributes: 
    - "linkquality"
    - "battery"
    - "voltage"

- platform: "mqtt"
  name: Mi Flora Moisture
  state_topic: "satellite/sensor/mi_flora_moisture/state"
  unit_of_measurement: "%"

- platform: "mqtt"
  name: Mi Flora Conductivity
  state_topic: "satellite/sensor/mi_flora_conductivity/state"
  unit_of_measurement: "µS/cm"

- platform: "mqtt"
  name: Mi Flora Temperature
  state_topic: "satellite/sensor/mi_flora_temperature/state"
  unit_of_measurement: "°C"

- platform: "mqtt"
  name: Mi Flora Light Intensity
  state_topic: "satellite/sensor/mi_flora_light_intensity/state"
  unit_of_measurement: "lx"

- platform: "mqtt"
  name: Mi Flora Battery
  state_topic: "satellite/sensor/mi_flora_battery/state"
  unit_of_measurement: "%"

- platform: "mqtt"
  name: Particle Sensor PM2.5
  state_topic: "satellite/sensor/particle_sensor_pm25/state"
  unit_of_measurement: "μg/m3"

- platform: "mqtt"
  name: Particle Sensor PM10
  state_topic: "satellite/sensor/particle_sensor_pm10/state"
  unit_of_measurement: "μg/m3"
